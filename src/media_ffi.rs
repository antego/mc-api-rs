#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

/* automatically generated by rust-bindgen 0.69.1 */

pub const _IOC_NRBITS: u32 = 8;
pub const _IOC_TYPEBITS: u32 = 8;
pub const _IOC_SIZEBITS: u32 = 14;
pub const _IOC_DIRBITS: u32 = 2;
pub const _IOC_NRMASK: u32 = 255;
pub const _IOC_TYPEMASK: u32 = 255;
pub const _IOC_SIZEMASK: u32 = 16383;
pub const _IOC_DIRMASK: u32 = 3;
pub const _IOC_NRSHIFT: u32 = 0;
pub const _IOC_TYPESHIFT: u32 = 8;
pub const _IOC_SIZESHIFT: u32 = 16;
pub const _IOC_DIRSHIFT: u32 = 30;
pub const _IOC_NONE: u32 = 0;
pub const _IOC_WRITE: u32 = 1;
pub const _IOC_READ: u32 = 2;
pub const IOC_IN: u32 = 1073741824;
pub const IOC_OUT: u32 = 2147483648;
pub const IOC_INOUT: u32 = 3221225472;
pub const IOCSIZE_MASK: u32 = 1073676288;
pub const IOCSIZE_SHIFT: u32 = 16;
pub const __BITS_PER_LONG: u32 = 64;
pub const __FD_SETSIZE: u32 = 1024;
pub const MEDIA_ENT_F_BASE: u32 = 0;
pub const MEDIA_ENT_F_OLD_BASE: u32 = 65536;
pub const MEDIA_ENT_F_OLD_SUBDEV_BASE: u32 = 131072;
pub const MEDIA_ENT_F_UNKNOWN: u32 = 0;
pub const MEDIA_ENT_F_V4L2_SUBDEV_UNKNOWN: u32 = 131072;
pub const MEDIA_ENT_F_DTV_DEMOD: u32 = 1;
pub const MEDIA_ENT_F_TS_DEMUX: u32 = 2;
pub const MEDIA_ENT_F_DTV_CA: u32 = 3;
pub const MEDIA_ENT_F_DTV_NET_DECAP: u32 = 4;
pub const MEDIA_ENT_F_IO_V4L: u32 = 65537;
pub const MEDIA_ENT_F_IO_DTV: u32 = 4097;
pub const MEDIA_ENT_F_IO_VBI: u32 = 4098;
pub const MEDIA_ENT_F_IO_SWRADIO: u32 = 4099;
pub const MEDIA_ENT_F_CAM_SENSOR: u32 = 131073;
pub const MEDIA_ENT_F_FLASH: u32 = 131074;
pub const MEDIA_ENT_F_LENS: u32 = 131075;
pub const MEDIA_ENT_F_TUNER: u32 = 131077;
pub const MEDIA_ENT_F_IF_VID_DECODER: u32 = 8193;
pub const MEDIA_ENT_F_IF_AUD_DECODER: u32 = 8194;
pub const MEDIA_ENT_F_AUDIO_CAPTURE: u32 = 12289;
pub const MEDIA_ENT_F_AUDIO_PLAYBACK: u32 = 12290;
pub const MEDIA_ENT_F_AUDIO_MIXER: u32 = 12291;
pub const MEDIA_ENT_F_PROC_VIDEO_COMPOSER: u32 = 16385;
pub const MEDIA_ENT_F_PROC_VIDEO_PIXEL_FORMATTER: u32 = 16386;
pub const MEDIA_ENT_F_PROC_VIDEO_PIXEL_ENC_CONV: u32 = 16387;
pub const MEDIA_ENT_F_PROC_VIDEO_LUT: u32 = 16388;
pub const MEDIA_ENT_F_PROC_VIDEO_SCALER: u32 = 16389;
pub const MEDIA_ENT_F_PROC_VIDEO_STATISTICS: u32 = 16390;
pub const MEDIA_ENT_F_PROC_VIDEO_ENCODER: u32 = 16391;
pub const MEDIA_ENT_F_PROC_VIDEO_DECODER: u32 = 16392;
pub const MEDIA_ENT_F_PROC_VIDEO_ISP: u32 = 16393;
pub const MEDIA_ENT_F_VID_MUX: u32 = 20481;
pub const MEDIA_ENT_F_VID_IF_BRIDGE: u32 = 20482;
pub const MEDIA_ENT_F_ATV_DECODER: u32 = 131076;
pub const MEDIA_ENT_F_DV_DECODER: u32 = 24577;
pub const MEDIA_ENT_F_DV_ENCODER: u32 = 24578;
pub const MEDIA_ENT_FL_DEFAULT: u32 = 1;
pub const MEDIA_ENT_FL_CONNECTOR: u32 = 2;
pub const MEDIA_ENT_ID_FLAG_NEXT: u32 = 2147483648;
pub const MEDIA_PAD_FL_SINK: u32 = 1;
pub const MEDIA_PAD_FL_SOURCE: u32 = 2;
pub const MEDIA_PAD_FL_MUST_CONNECT: u32 = 4;
pub const MEDIA_LNK_FL_ENABLED: u32 = 1;
pub const MEDIA_LNK_FL_IMMUTABLE: u32 = 2;
pub const MEDIA_LNK_FL_DYNAMIC: u32 = 4;
pub const MEDIA_LNK_FL_LINK_TYPE: u32 = 4026531840;
pub const MEDIA_LNK_FL_DATA_LINK: u32 = 0;
pub const MEDIA_LNK_FL_INTERFACE_LINK: u32 = 268435456;
pub const MEDIA_LNK_FL_ANCILLARY_LINK: u32 = 536870912;
pub const MEDIA_INTF_T_DVB_BASE: u32 = 256;
pub const MEDIA_INTF_T_V4L_BASE: u32 = 512;
pub const MEDIA_INTF_T_DVB_FE: u32 = 256;
pub const MEDIA_INTF_T_DVB_DEMUX: u32 = 257;
pub const MEDIA_INTF_T_DVB_DVR: u32 = 258;
pub const MEDIA_INTF_T_DVB_CA: u32 = 259;
pub const MEDIA_INTF_T_DVB_NET: u32 = 260;
pub const MEDIA_INTF_T_V4L_VIDEO: u32 = 512;
pub const MEDIA_INTF_T_V4L_VBI: u32 = 513;
pub const MEDIA_INTF_T_V4L_RADIO: u32 = 514;
pub const MEDIA_INTF_T_V4L_SUBDEV: u32 = 515;
pub const MEDIA_INTF_T_V4L_SWRADIO: u32 = 516;
pub const MEDIA_INTF_T_V4L_TOUCH: u32 = 517;
pub const MEDIA_INTF_T_ALSA_BASE: u32 = 768;
pub const MEDIA_INTF_T_ALSA_PCM_CAPTURE: u32 = 768;
pub const MEDIA_INTF_T_ALSA_PCM_PLAYBACK: u32 = 769;
pub const MEDIA_INTF_T_ALSA_CONTROL: u32 = 770;
pub const MEDIA_ENT_TYPE_SHIFT: u32 = 16;
pub const MEDIA_ENT_TYPE_MASK: u32 = 16711680;
pub const MEDIA_ENT_SUBTYPE_MASK: u32 = 65535;
pub const MEDIA_ENT_T_DEVNODE_UNKNOWN: u32 = 131071;
pub const MEDIA_ENT_T_DEVNODE: u32 = 65536;
pub const MEDIA_ENT_T_DEVNODE_V4L: u32 = 65537;
pub const MEDIA_ENT_T_DEVNODE_FB: u32 = 65538;
pub const MEDIA_ENT_T_DEVNODE_ALSA: u32 = 65539;
pub const MEDIA_ENT_T_DEVNODE_DVB: u32 = 65540;
pub const MEDIA_ENT_T_UNKNOWN: u32 = 0;
pub const MEDIA_ENT_T_V4L2_VIDEO: u32 = 65537;
pub const MEDIA_ENT_T_V4L2_SUBDEV: u32 = 131072;
pub const MEDIA_ENT_T_V4L2_SUBDEV_SENSOR: u32 = 131073;
pub const MEDIA_ENT_T_V4L2_SUBDEV_FLASH: u32 = 131074;
pub const MEDIA_ENT_T_V4L2_SUBDEV_LENS: u32 = 131075;
pub const MEDIA_ENT_T_V4L2_SUBDEV_DECODER: u32 = 131076;
pub const MEDIA_ENT_T_V4L2_SUBDEV_TUNER: u32 = 131077;
pub const MEDIA_ENT_F_DTV_DECODER: u32 = 24577;
pub const MEDIA_INTF_T_ALSA_COMPRESS: u32 = 771;
pub const MEDIA_INTF_T_ALSA_RAWMIDI: u32 = 772;
pub const MEDIA_INTF_T_ALSA_HWDEP: u32 = 773;
pub const MEDIA_INTF_T_ALSA_SEQUENCER: u32 = 774;
pub const MEDIA_INTF_T_ALSA_TIMER: u32 = 775;
pub const MEDIA_API_VERSION: u32 = 256;
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___kernel_fd_set() {
    const UNINIT: ::std::mem::MaybeUninit<__kernel_fd_set> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__kernel_fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fds_bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_old_dev_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___kernel_fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__kernel_fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__kernel_fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fsid_t),
            "::",
            stringify!(val)
        )
    );
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_old_time_t = __kernel_long_t;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type __poll_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct media_device_info {
    pub driver: [::std::os::raw::c_char; 16usize],
    pub model: [::std::os::raw::c_char; 32usize],
    pub serial: [::std::os::raw::c_char; 40usize],
    pub bus_info: [::std::os::raw::c_char; 32usize],
    pub media_version: __u32,
    pub hw_revision: __u32,
    pub driver_version: __u32,
    pub reserved: [__u32; 31usize],
}
#[test]
fn bindgen_test_layout_media_device_info() {
    const UNINIT: ::std::mem::MaybeUninit<media_device_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<media_device_info>(),
        256usize,
        concat!("Size of: ", stringify!(media_device_info))
    );
    assert_eq!(
        ::std::mem::align_of::<media_device_info>(),
        4usize,
        concat!("Alignment of ", stringify!(media_device_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driver) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(media_device_info),
            "::",
            stringify!(driver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).model) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(media_device_info),
            "::",
            stringify!(model)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).serial) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(media_device_info),
            "::",
            stringify!(serial)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bus_info) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(media_device_info),
            "::",
            stringify!(bus_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).media_version) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(media_device_info),
            "::",
            stringify!(media_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hw_revision) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(media_device_info),
            "::",
            stringify!(hw_revision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driver_version) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(media_device_info),
            "::",
            stringify!(driver_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(media_device_info),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct media_entity_desc {
    pub id: __u32,
    pub name: [::std::os::raw::c_char; 32usize],
    pub type_: __u32,
    pub revision: __u32,
    pub flags: __u32,
    pub group_id: __u32,
    pub pads: __u16,
    pub links: __u16,
    pub reserved: [__u32; 4usize],
    pub __bindgen_anon_1: media_entity_desc__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union media_entity_desc__bindgen_ty_1 {
    pub dev: media_entity_desc__bindgen_ty_1__bindgen_ty_1,
    pub alsa: media_entity_desc__bindgen_ty_1__bindgen_ty_2,
    pub v4l: media_entity_desc__bindgen_ty_1__bindgen_ty_3,
    pub fb: media_entity_desc__bindgen_ty_1__bindgen_ty_4,
    pub dvb: ::std::os::raw::c_int,
    pub raw: [__u8; 184usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct media_entity_desc__bindgen_ty_1__bindgen_ty_1 {
    pub major: __u32,
    pub minor: __u32,
}
#[test]
fn bindgen_test_layout_media_entity_desc__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<media_entity_desc__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<media_entity_desc__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(media_entity_desc__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<media_entity_desc__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(media_entity_desc__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(media_entity_desc__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(media_entity_desc__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(minor)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct media_entity_desc__bindgen_ty_1__bindgen_ty_2 {
    pub card: __u32,
    pub device: __u32,
    pub subdevice: __u32,
}
#[test]
fn bindgen_test_layout_media_entity_desc__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<media_entity_desc__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<media_entity_desc__bindgen_ty_1__bindgen_ty_2>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(media_entity_desc__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<media_entity_desc__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(media_entity_desc__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).card) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(media_entity_desc__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(card)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(media_entity_desc__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(device)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subdevice) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(media_entity_desc__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(subdevice)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct media_entity_desc__bindgen_ty_1__bindgen_ty_3 {
    pub major: __u32,
    pub minor: __u32,
}
#[test]
fn bindgen_test_layout_media_entity_desc__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<media_entity_desc__bindgen_ty_1__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<media_entity_desc__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(media_entity_desc__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<media_entity_desc__bindgen_ty_1__bindgen_ty_3>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(media_entity_desc__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(media_entity_desc__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(media_entity_desc__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(minor)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct media_entity_desc__bindgen_ty_1__bindgen_ty_4 {
    pub major: __u32,
    pub minor: __u32,
}
#[test]
fn bindgen_test_layout_media_entity_desc__bindgen_ty_1__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<media_entity_desc__bindgen_ty_1__bindgen_ty_4> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<media_entity_desc__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(media_entity_desc__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<media_entity_desc__bindgen_ty_1__bindgen_ty_4>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(media_entity_desc__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(media_entity_desc__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(media_entity_desc__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(minor)
        )
    );
}
#[test]
fn bindgen_test_layout_media_entity_desc__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<media_entity_desc__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<media_entity_desc__bindgen_ty_1>(),
        184usize,
        concat!("Size of: ", stringify!(media_entity_desc__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<media_entity_desc__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(media_entity_desc__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(media_entity_desc__bindgen_ty_1),
            "::",
            stringify!(dev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alsa) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(media_entity_desc__bindgen_ty_1),
            "::",
            stringify!(alsa)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v4l) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(media_entity_desc__bindgen_ty_1),
            "::",
            stringify!(v4l)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(media_entity_desc__bindgen_ty_1),
            "::",
            stringify!(fb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dvb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(media_entity_desc__bindgen_ty_1),
            "::",
            stringify!(dvb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(media_entity_desc__bindgen_ty_1),
            "::",
            stringify!(raw)
        )
    );
}
#[test]
fn bindgen_test_layout_media_entity_desc() {
    const UNINIT: ::std::mem::MaybeUninit<media_entity_desc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<media_entity_desc>(),
        256usize,
        concat!("Size of: ", stringify!(media_entity_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<media_entity_desc>(),
        4usize,
        concat!("Alignment of ", stringify!(media_entity_desc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(media_entity_desc),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(media_entity_desc),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(media_entity_desc),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(media_entity_desc),
            "::",
            stringify!(revision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(media_entity_desc),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).group_id) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(media_entity_desc),
            "::",
            stringify!(group_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pads) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(media_entity_desc),
            "::",
            stringify!(pads)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).links) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(media_entity_desc),
            "::",
            stringify!(links)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(media_entity_desc),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct media_pad_desc {
    pub entity: __u32,
    pub index: __u16,
    pub flags: __u32,
    pub reserved: [__u32; 2usize],
}
#[test]
fn bindgen_test_layout_media_pad_desc() {
    const UNINIT: ::std::mem::MaybeUninit<media_pad_desc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<media_pad_desc>(),
        20usize,
        concat!("Size of: ", stringify!(media_pad_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<media_pad_desc>(),
        4usize,
        concat!("Alignment of ", stringify!(media_pad_desc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entity) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(media_pad_desc),
            "::",
            stringify!(entity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(media_pad_desc),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(media_pad_desc),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(media_pad_desc),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct media_link_desc {
    pub source: media_pad_desc,
    pub sink: media_pad_desc,
    pub flags: __u32,
    pub reserved: [__u32; 2usize],
}
#[test]
fn bindgen_test_layout_media_link_desc() {
    const UNINIT: ::std::mem::MaybeUninit<media_link_desc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<media_link_desc>(),
        52usize,
        concat!("Size of: ", stringify!(media_link_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<media_link_desc>(),
        4usize,
        concat!("Alignment of ", stringify!(media_link_desc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).source) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(media_link_desc),
            "::",
            stringify!(source)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sink) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(media_link_desc),
            "::",
            stringify!(sink)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(media_link_desc),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(media_link_desc),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct media_links_enum {
    pub entity: __u32,
    pub pads: *mut media_pad_desc,
    pub links: *mut media_link_desc,
    pub reserved: [__u32; 4usize],
}
#[test]
fn bindgen_test_layout_media_links_enum() {
    const UNINIT: ::std::mem::MaybeUninit<media_links_enum> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<media_links_enum>(),
        40usize,
        concat!("Size of: ", stringify!(media_links_enum))
    );
    assert_eq!(
        ::std::mem::align_of::<media_links_enum>(),
        8usize,
        concat!("Alignment of ", stringify!(media_links_enum))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entity) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(media_links_enum),
            "::",
            stringify!(entity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pads) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(media_links_enum),
            "::",
            stringify!(pads)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).links) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(media_links_enum),
            "::",
            stringify!(links)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(media_links_enum),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct media_v2_entity {
    pub id: __u32,
    pub name: [::std::os::raw::c_char; 64usize],
    pub function: __u32,
    pub flags: __u32,
    pub reserved: [__u32; 5usize],
}
#[test]
fn bindgen_test_layout_media_v2_entity() {
    const UNINIT: ::std::mem::MaybeUninit<media_v2_entity> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<media_v2_entity>(),
        96usize,
        concat!("Size of: ", stringify!(media_v2_entity))
    );
    assert_eq!(
        ::std::mem::align_of::<media_v2_entity>(),
        1usize,
        concat!("Alignment of ", stringify!(media_v2_entity))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(media_v2_entity),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(media_v2_entity),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).function) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(media_v2_entity),
            "::",
            stringify!(function)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(media_v2_entity),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(media_v2_entity),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct media_v2_intf_devnode {
    pub major: __u32,
    pub minor: __u32,
}
#[test]
fn bindgen_test_layout_media_v2_intf_devnode() {
    const UNINIT: ::std::mem::MaybeUninit<media_v2_intf_devnode> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<media_v2_intf_devnode>(),
        8usize,
        concat!("Size of: ", stringify!(media_v2_intf_devnode))
    );
    assert_eq!(
        ::std::mem::align_of::<media_v2_intf_devnode>(),
        1usize,
        concat!("Alignment of ", stringify!(media_v2_intf_devnode))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(media_v2_intf_devnode),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(media_v2_intf_devnode),
            "::",
            stringify!(minor)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct media_v2_interface {
    pub id: __u32,
    pub intf_type: __u32,
    pub flags: __u32,
    pub reserved: [__u32; 9usize],
    pub __bindgen_anon_1: media_v2_interface__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union media_v2_interface__bindgen_ty_1 {
    pub devnode: media_v2_intf_devnode,
    pub raw: [__u32; 16usize],
}
#[test]
fn bindgen_test_layout_media_v2_interface__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<media_v2_interface__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<media_v2_interface__bindgen_ty_1>(),
        64usize,
        concat!("Size of: ", stringify!(media_v2_interface__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<media_v2_interface__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(media_v2_interface__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devnode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(media_v2_interface__bindgen_ty_1),
            "::",
            stringify!(devnode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(media_v2_interface__bindgen_ty_1),
            "::",
            stringify!(raw)
        )
    );
}
#[test]
fn bindgen_test_layout_media_v2_interface() {
    const UNINIT: ::std::mem::MaybeUninit<media_v2_interface> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<media_v2_interface>(),
        112usize,
        concat!("Size of: ", stringify!(media_v2_interface))
    );
    assert_eq!(
        ::std::mem::align_of::<media_v2_interface>(),
        1usize,
        concat!("Alignment of ", stringify!(media_v2_interface))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(media_v2_interface),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).intf_type) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(media_v2_interface),
            "::",
            stringify!(intf_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(media_v2_interface),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(media_v2_interface),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct media_v2_pad {
    pub id: __u32,
    pub entity_id: __u32,
    pub flags: __u32,
    pub index: __u32,
    pub reserved: [__u32; 4usize],
}
#[test]
fn bindgen_test_layout_media_v2_pad() {
    const UNINIT: ::std::mem::MaybeUninit<media_v2_pad> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<media_v2_pad>(),
        32usize,
        concat!("Size of: ", stringify!(media_v2_pad))
    );
    assert_eq!(
        ::std::mem::align_of::<media_v2_pad>(),
        1usize,
        concat!("Alignment of ", stringify!(media_v2_pad))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(media_v2_pad),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entity_id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(media_v2_pad),
            "::",
            stringify!(entity_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(media_v2_pad),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(media_v2_pad),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(media_v2_pad),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct media_v2_link {
    pub id: __u32,
    pub source_id: __u32,
    pub sink_id: __u32,
    pub flags: __u32,
    pub reserved: [__u32; 6usize],
}
#[test]
fn bindgen_test_layout_media_v2_link() {
    const UNINIT: ::std::mem::MaybeUninit<media_v2_link> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<media_v2_link>(),
        40usize,
        concat!("Size of: ", stringify!(media_v2_link))
    );
    assert_eq!(
        ::std::mem::align_of::<media_v2_link>(),
        1usize,
        concat!("Alignment of ", stringify!(media_v2_link))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(media_v2_link),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).source_id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(media_v2_link),
            "::",
            stringify!(source_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sink_id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(media_v2_link),
            "::",
            stringify!(sink_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(media_v2_link),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(media_v2_link),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct media_v2_topology {
    pub topology_version: __u64,
    pub num_entities: __u32,
    pub reserved1: __u32,
    pub ptr_entities: __u64,
    pub num_interfaces: __u32,
    pub reserved2: __u32,
    pub ptr_interfaces: __u64,
    pub num_pads: __u32,
    pub reserved3: __u32,
    pub ptr_pads: __u64,
    pub num_links: __u32,
    pub reserved4: __u32,
    pub ptr_links: __u64,
}
#[test]
fn bindgen_test_layout_media_v2_topology() {
    const UNINIT: ::std::mem::MaybeUninit<media_v2_topology> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<media_v2_topology>(),
        72usize,
        concat!("Size of: ", stringify!(media_v2_topology))
    );
    assert_eq!(
        ::std::mem::align_of::<media_v2_topology>(),
        1usize,
        concat!("Alignment of ", stringify!(media_v2_topology))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).topology_version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(media_v2_topology),
            "::",
            stringify!(topology_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_entities) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(media_v2_topology),
            "::",
            stringify!(num_entities)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(media_v2_topology),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr_entities) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(media_v2_topology),
            "::",
            stringify!(ptr_entities)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_interfaces) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(media_v2_topology),
            "::",
            stringify!(num_interfaces)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved2) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(media_v2_topology),
            "::",
            stringify!(reserved2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr_interfaces) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(media_v2_topology),
            "::",
            stringify!(ptr_interfaces)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_pads) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(media_v2_topology),
            "::",
            stringify!(num_pads)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved3) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(media_v2_topology),
            "::",
            stringify!(reserved3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr_pads) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(media_v2_topology),
            "::",
            stringify!(ptr_pads)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_links) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(media_v2_topology),
            "::",
            stringify!(num_links)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved4) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(media_v2_topology),
            "::",
            stringify!(reserved4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr_links) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(media_v2_topology),
            "::",
            stringify!(ptr_links)
        )
    );
}

